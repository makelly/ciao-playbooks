---
# Configure ciao base services

- name: Deploy ansible docker issues workaround
  hosts: all
  sudo: True
  tasks:
    - name: Install python pip
      apt: name=python-pip state=present update_cache=yes cache_valid_time=3600
    - name: Install docker-py as a workaround for Ansible issue
      pip: name=docker-py version=1.2.3 state=present

- name: Deploy ELK
  hosts: elk
  sudo: True
  vars:
    logstash_config_directory: "/opt/ciao_logstash/conf"
    elastic_data_directory: "/opt/ciao_elastic/data" 
  tasks:
    - name: Create Logstash configuration directory
      file: path={{ logstash_config_directory }} state=directory
    - name: Create Elastic data directory
      file: path={{ elastic_data_directory }} state=directory
    - name: Install Logstash configuration file
      template: src=templates/logstash.conf.j2 dest={{ logstash_config_directory }}/logstash.conf
    - name: Install ELK stack
      docker:
        name: ciao-elk
        image: willdurand/elk
        state: restarted
        restart_policy: always
        ports:
        - "8080:80"
        - "514:514"
        volumes:
        - "{{ logstash_config_directory }}:/etc/logstash"
        - "{{ elastic_data_directory }}:/data"

- name: Deploy Nagios
  hosts: nagios
  sudo: True
  tasks:
    - name: Install Nagios
      docker:
        name: ciao-nagios
        image: cpuguy83/nagios
        state: restarted
        restart_policy: always
        ports:
        - "8081:80"

- name: Deploy Logspout
  hosts: logspout
  sudo: True
  tasks:
    - name: Install Logspout
      docker:
        name: ciao-logspout
        image: gliderlabs/logspout
        state: restarted
        restart_policy: always
        command: "{% for host in groups.elk %}syslog://{{ hostvars[host].ansible_default_ipv4.address }}:514{% if not loop.last %},{% endif %}{% endfor %}"
        ports:
        - "8000:8000"
        volumes:
        - "/var/run/docker.sock:/tmp/docker.sock"

- name: Deploy etcd cluster
  hosts: etcd
  sudo: True
  vars:
    etcd_cluster: "{% for host in groups.etcd %}etcd-{{ hostvars[host].inventory_hostname }}=http://{{ hostvars[host].ansible_default_ipv4.address }}:2380{% if not loop.last %},{% endif %}{% endfor %}"
  tasks:
    - name: Install etcd
      docker:
        name: ciao-etcd
        image: quay.io/coreos/etcd:v2.0.8
        state: restarted
        restart_policy: always
        ports:
        - "4001:4001"
        - "2380:2380"
        - "2379:2379"
        env:
          ETCD_NAME: etcd-{{ inventory_hostname }}
          ETCD_INITIAL_ADVERTISE_PEER_URLS: http://{{ ansible_default_ipv4.address }}:2380
          ETCD_ADVERTISE_CLIENT_URLS: http://{{ ansible_default_ipv4.address }}:2379,http://{{ ansible_default_ipv4.address }}:4001
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379,http://0.0.0.0:4001
          ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
          ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster-ciao
          ETCD_INITIAL_CLUSTER: "{{ etcd_cluster }}"
          ETCD_INITIAL_CLUSTER_STATE: new 

- name: Deploy ZooKeeper cluster
  hosts: zookeeper
  sudo: True
  vars:
    zoo_config_directory: "/opt/ciao_zookeeper/conf"
    zoo_data_directory: "/var/lib/ciao_zookeeper"
  tasks:
    - name: Create ZooKeeper configuration directory
      file: path={{ zoo_config_directory }} state=directory
    - name: Create ZooKeeper data directory
      file: path={{ zoo_data_directory }} state=directory
    - name: Install configuration file
      template: src=templates/zoo.cfg.j2 dest={{ zoo_config_directory }}/zoo.cfg
    - name: Install logging configuration file
      template: src=templates/zoo.log4j.properties.j2 dest={{ zoo_config_directory }}/log4j.properties
    - name: Install myid file
      template: src=templates/myid.j2 dest={{ zoo_data_directory }}/myid
    - name: Install ZooKeeper
      docker:
        name: ciao-zookeeper
        image: jplock/zookeeper
        state: restarted
        restart_policy: always
        ports:
        - "2181:2181"
        - "2888:2888"
        - "3888:3888"
        volumes:
        - "{{ zoo_config_directory }}:/opt/zookeeper/conf"
        - "{{ zoo_data_directory }}:/tmp/zookeeper"

- name: Deploy ActiveMQ cluster
  hosts: activemq
  sudo: True
  vars:
# Kludge
    activemq_n_hosts: "3"
    activemq_broker_name: "CiaoBroker"
    activemq_config_directory: "/opt/ciao_activemq/conf"
    activemq_username: "ciao"
    activemq_password: "ciao"
  tasks:
    - name: Create ActiveMQ configuration directory
      file: path={{ activemq_config_directory }} state=directory
    - name: Install broker configuration file
      template: src=templates/activemq.xml.j2 dest={{ activemq_config_directory }}/activemq.xml
    - name: Install log4j.properties
      copy: src=files/activemq.conf/log4j.properties dest={{ activemq_config_directory }}/log4j.properties
    - name: Install broker.ks
      copy: src=files/activemq.conf/broker.ks dest={{ activemq_config_directory }}/broker.ks
    - name: Install broker.ts
      copy: src=files/activemq.conf/broker.ts dest={{ activemq_config_directory }}/broker.ts
    - name: Install broker-localhost.cert
      copy: src=files/activemq.conf/broker-localhost.cert dest={{ activemq_config_directory }}/broker-localhost.cert
    - name: Install client.ks
      copy: src=files/activemq.conf/client.ks dest={{ activemq_config_directory }}/client.ks
    - name: Install client.ts
      copy: src=files/activemq.conf/client.ts dest={{ activemq_config_directory }}/client.ts
    - name: Install credentials.properties
      copy: src=files/activemq.conf/credentials.properties dest={{ activemq_config_directory }}/credentials.properties
    - name: Install credentials-enc.properties
      copy: src=files/activemq.conf/credentials-enc.properties dest={{ activemq_config_directory }}/credentials-enc.properties
    - name: Install groups.properties
      copy: src=files/activemq.conf/groups.properties dest={{ activemq_config_directory }}/groups.properties
    - name: Install jetty.xml
      copy: src=files/activemq.conf/jetty.xml dest={{ activemq_config_directory }}/jetty.xml
    - name: Install jetty-realm.properties
      copy: src=files/activemq.conf/jetty-realm.properties dest={{ activemq_config_directory }}/jetty-realm.properties
    - name: Install jmx.access
      copy: src=files/activemq.conf/jmx.access dest={{ activemq_config_directory }}/jmx.access
    - name: Install jmx.password
      copy: src=files/activemq.conf/jmx.password dest={{ activemq_config_directory }}/jmx.password
    - name: Install logging.properties
      copy: src=files/activemq.conf/logging.properties dest={{ activemq_config_directory }}/logging.properties
    - name: Install login.config
      copy: src=files/activemq.conf/login.config dest={{ activemq_config_directory }}/login.config
    - name: Install users.properties
      copy: src=files/activemq.conf/users.properties dest={{ activemq_config_directory }}/users.properties
    - name: Install ActiveMQ
      docker:
        name: ciao-activemq
        image: hscic/ciao-activemq
        state: restarted
        restart_policy: always
        ports:
        - "8161:8161"
        - "61616:61616"
        - "61619:61619"
        volumes:
        - "{{ activemq_config_directory }}:/opt/activemq/conf"
